#include "F2802x_Device.h"

interrupt void adcISR(void);
interrupt void TimerISR(void);

Uint16 i;
Uint16 count;
Uint16 V[1000];
Uint16 y;

int main(void)
{
    count = 0;
    i = 0;

    asm(" EALLOW");             // Activate an access to restricted registers
    SysCtrlRegs.WDCR = 0x68;    // Deactivate WatchDog Timer

    // Set MUXs
    GpioCtrlRegs.GPAMUX1.bit.GPIO12 = 0; // PB 3
    GpioCtrlRegs.GPAMUX1.bit.GPIO0 = 1; // PWM pin A; ePMW1 output A(O)
    GpioCtrlRegs.GPAMUX1.bit.GPIO1 = 0;  // PWM pin A reset; general purpose I/O
    GpioCtrlRegs.GPAMUX1.bit.GPIO2 = 1;  // PWM pin B; ePMW2 output A(O)
    GpioCtrlRegs.GPAMUX1.bit.GPIO3 = 0;  // PWM pin B reset; general purpose I/O


    // Set Directions

    GpioCtrlRegs.GPADIR.bit.GPIO12 = 0; // PB 3 : Input
    GpioCtrlRegs.GPADIR.bit.GPIO1 = 1;  // Configure this pin as an output
    GpioCtrlRegs.GPADIR.bit.GPIO3 = 1;  // Configure this pin as an output
    GpioDataRegs.GPASET.bit.GPIO1 = 1;  // RESETA; reset by setting to 0
    GpioDataRegs.GPASET.bit.GPIO3 = 1;  // RESETB; reset by setting to 0

    // Enable Pull-down resistor
        GpioCtrlRegs.GPAPUD.bit.GPIO12 = 1;
        GpioCtrlRegs.GPAQSEL1.bit.GPIO12 = 10;
        GpioCtrlRegs.GPACTRL.bit.QUALPRD1 = 0x01;


    // Interrupt set up

    // Follow the chart to set up Clock Timer
    SysCtrlRegs.PLLSTS.bit.DIVSEL = 0;
    SysCtrlRegs.PLLSTS.bit.MCLKOFF = 1;
    SysCtrlRegs.PLLCR.bit.DIV = 10;
    while(SysCtrlRegs.PLLSTS.bit.PLLLOCKS != 1) { }
    SysCtrlRegs.PLLSTS.bit.MCLKOFF = 0;
    SysCtrlRegs.PLLSTS.bit.DIVSEL = 3; // fCPU = 100MHz

    // Set Timer frequency
    CpuTimer0Regs.PRD.all = 999; // fTMR = 100kHz

    // Preparation steps to use CPU Timer 0
    CpuTimer0Regs.TCR.bit.TSS = 1;
    CpuTimer0Regs.TCR.bit.TRB = 1;
    CpuTimer0Regs.TCR.bit.TIE = 1;
    CpuTimer0Regs.TCR.bit.TSS = 0;

    // Set PMW frequency
    SysCtrlRegs.PCLKCR1.bit.EPWM1ENCLK = 1; // Enable EPWM1 Clock

    EPwm1Regs.TBCTL.bit.CTRMODE = 10;   // Up-Down Count Mode

    EPwm1Regs.TBPRD = 50000; // Set up Vres for Pwm1

    EPwm1Regs.TBCTL.bit.HSPCLKDIV = 000;

    EPwm1Regs.TBCTL.bit.CLKDIV = 000;


    // Set EPWM Output Actions

    EPwm1Regs.AQCTLA.bit.CAU = 1; // Force PWM1A output low when the counter is incrementing
    EPwm1Regs.AQCTLA.bit.CAD = 2; // Force PWM1A output high when the counter is decrementing

    // Enable Time Base Clock

    SysCtrlRegs.PCLKCR0.bit.TBCLKSYNC = 1;


    // ADC set up
    // ADC is now clocked.
    SysCtrlRegs.PCLKCR0.bit.ADCENCLK = 1;
    asm(" NOP");
    asm(" NOP");


    //Setting ADC to non-overlap
    AdcRegs.ADCCTL2.bit.ADCNONOVERLAP = 1;
    AdcRegs.ADCCTL2.bit.CLKDIV2EN = 0;

    //Enabling the module power supply
    AdcRegs.ADCCTL1.bit.ADCPWDN = 1;
    AdcRegs.ADCCTL1.bit.ADCBGPWD = 1;
    AdcRegs.ADCCTL1.bit.ADCREFPWD = 1;
    AdcRegs.ADCCTL1.bit.ADCENABLE = 1;

    while(i < 40000)
    {
        i++;
    }

    AdcRegs.ADCSOC0CTL.bit.CHSEL = 0;    // Selects A0 as channel
    AdcRegs.ADCSOC0CTL.bit.ACQPS = 0x05; // Not sure about these values
    AdcRegs.ADCSOC0CTL.bit.TRIGSEL = 1;
    AdcRegs.INTSEL3N4.bit.INT3E = 1;
    AdcRegs.INTSEL3N4.bit.INT3SEL = 0;
    AdcRegs.ADCCTL1.bit.INTPULSEPOS = 1;


    // Set up to use interrupt services

    // Load the PIE Vector Table
    PieCtrlRegs.PIECTRL.bit.ENPIE = 1;
    PieVectTable.TINT0 = &TimerISR;
    PieVectTable.ADCINT3 = &adcISR;

    // Enable Interrupts at the PIE Level
    PieCtrlRegs.PIEIER1.bit.INTx7 = 1;
    PieCtrlRegs.PIEIER10.bit.INTx3 = 1;
    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1 | PIEACK_GROUP10;
    //PieCtrlRegs.PIEACK.all = 1;

    // Enable interrupts at the CPU Level
    IER = 0x201;
    EINT;

    SysCtrlRegs.WDCR = 0x28;    // Activate WatchDog Timer again
    asm(" EDIS");               // Deactivate an access to restricted registers

    while(1)
    {
        // Reset WatchDog Timer logics
        asm(" EALLOW");
        SysCtrlRegs.WDKEY = 0x55;
        SysCtrlRegs.WDKEY = 0xAA;
        asm(" EDIS");
    }

    return 0;
}

interrupt void TimerISR(void)
{
    if (GpioDataRegs.GPADAT.bit.GPIO12 == 1)
        EPwm1Regs.CMPA.half.CMPA = 5000;
    else
        EPwm1Regs.CMPA.half.CMPA = 45000;


    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}

interrupt void adcISR(void)
{
    y = AdcResult.ADCRESULT0;


    if (count < 1000)
    {
        V[count] = y;
    }

    if (count > 10000)
        count = 0;

    AdcRegs.ADCINTFLGCLR.bit.ADCINT3 = 1;
    count++;

    PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;
}